angular.module("event",[]),angular.module("profile",["ngMessages","ngAnimate","ui.bootstrap"]),angular.module("auth",["ngMessages"]),angular.module("admin",[]),function(){var e=function(e){var n=function(){function n(e){return e.data}function t(e){console.log("Failure: "+e)}var r="/api/profile/";return e({method:"GET",url:r}).then(n,t)};return{getUsers:n}};angular.module("admin").factory("userService",["$http",e])}(),function(){var e=function(e){var n=function(){function n(e){return e.data}function t(e){console.log("Failure: "+e)}var r="/api/events";return e({method:"GET",url:r}).then(n,t)};return{getEvents:n}};angular.module("admin").factory("eventService",["$http",e])}(),function(){var e=function(e){var n=function(){function n(e){return e.data}function t(e){console.log("Failure: "+e)}var r="/api/groups";return e({method:"GET",url:r}).then(n,t)};return{getGroup:n}};angular.module("admin").factory("groupService",["$http",e])}(),function(){var e=function(){var e=function(e){var n={id:e},t=new XMLHttpRequest;t.open("DELETE","/api/user/delete/:_id",!0),t.setRequestHeader("Content-type","application/json"),t.send(JSON.stringify(n))},n=function(e){var n={id:e},t=new XMLHttpRequest;t.open("DELETE","/api/event/delete/:_id",!0),t.setRequestHeader("Content-type","application/json"),t.send(JSON.stringify(n))},t=function(e){var n={id:e},t=new XMLHttpRequest;t.open("DELETE","/api/group/delete/:_id",!0),t.setRequestHeader("Content-type","application/json"),t.send(JSON.stringify(n))};return{deleteU:e,deleteE:n,deleteG:t}};angular.module("admin").factory("adminService",[e])}(),function(){"use strict";var e=function(e,n,t,r,i){e.nameFilterU=null,e.nameFilterE=null,e.nameFilterG=null,e.searchFilterU=function(n){var t=new RegExp(e.nameFilterU,"i");return!e.nameFilterU||t.test(n.firstName)},e.searchFilterE=function(n){var t=new RegExp(e.nameFilterE,"i");return!e.nameFilterE||t.test(n.name)},e.searchFilterG=function(n){var t=new RegExp(e.nameFilterG,"i");return!e.nameFilterG||t.test(n.name)},n.getUsers().then(function(n){e.allUsers=n}),t.getEvents().then(function(n){e.allEvents=n}),r.getGroup().then(function(n){e.allGroups=n}),e.deleteUser=function(e){i.deleteU(e)},e.deleteEvent=function(e){i.deleteE(e)},e.deleteGroup=function(e){i["delete"](e)}};angular.module("admin").controller("AdminController",["$scope","userService","eventService","groupService","adminService",e])}();
//# sourceMappingURL=data:application/json;base64,
