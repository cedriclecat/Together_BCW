angular.module("event",[]),angular.module("profile",["ngMessages","ngAnimate","ui.bootstrap"]),angular.module("auth",["ngMessages"]),angular.module("admin",[]),function(){var e=function(e){var t=function(){function t(e){return e.data}function n(e){console.log("Failure: "+e)}var a="/api/status";return e({method:"GET",url:a}).then(t,n)};return{getMStatus:t}};angular.module("profile").factory("mStatusService",["$http",e])}(),function(){var e=function(e){var t=function(){function t(e){return e.data}function n(e){console.log("Failure: "+e)}var a="/api/jobs";return e({method:"GET",url:a}).then(t,n)};return{getJobs:t}};angular.module("profile").factory("jobService",["$http",e])}(),function(){var e=function(e){var t=function(){function t(e){return e.data}function n(e){console.log("Failure: "+e)}var a="/api/countries";return e({method:"GET",url:a}).then(t,n)};return{getCountries:t}};angular.module("profile").factory("countryService",["$http",e])}(),function(){var e=function(e){var t=function(){for(var e={},t=window.location.search.substring(1),n=t.split("&"),a=0;a<n.length;a++){var o=n[a].split("=");if("undefined"==typeof e[o[0]])e[o[0]]=decodeURIComponent(o[1]);else if("string"==typeof e[o[0]]){var r=[e[o[0]],decodeURIComponent(o[1])];e[o[0]]=r}else e[o[0]].push(decodeURIComponent(o[1]))}return e}(),n=function(){function n(e){return e.data}function a(e){console.log("Failure: "+e.data)}var o="/api/profile/:_id?id="+t.id;return e({method:"GET",url:o}).then(n,a)};return{getById:n}};angular.module("profile").factory("certainUserService",["$http",e])}(),function(){"use strict";var e=function(e,t,n,a,o,r,i){a.getMStatus().then(function(t){e.status=t}),o.getJobs().then(function(t){e.jobs=t}),r.getCountries().then(function(t){e.countries=t}),i.getById().then(function(t){e.profile=t}),e.submitForm=function(){function n(e){return e.data}function a(e){}e.formData=JSON.stringify({firstName:this.firstName,lastName:this.lastName,email:this.email,gender:this.gender,marital:this.marital.name,birthday:this.dt,work:this.work.name,country:this.country.name,city:this.city,interests:this.interests,description:this.description}),t.post("/api/profile/:id",e.formData).then(n,a)},e.today=function(){e.dt=new Date},e.today(),e.clear=function(){e.dt=null},e.disabled=function(e,t){return"day"===t&&(0===e.getDay()||6===e.getDay())},e.toggleMin=function(){e.minDate=new Date(1900,1,1)},e.toggleMin(),e.maxDate=new Date(2020,5,22),e.open=function(t){e.status.opened=!0},e.setDate=function(t,n,a){e.dt=new Date(t,n,a)},e.dateOptions={formatYear:"yy",startingDay:1},e.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],e.format=e.formats[0],e.status={opened:!1};var s=new Date;s.setDate(s.getDate()+1);var u=new Date;u.setDate(s.getDate()+2),e.events=[{date:s,status:"full"},{date:u,status:"partially"}],e.getDayClass=function(t,n){if("day"===n)for(var a=new Date(t).setHours(0,0,0,0),o=0;o<e.events.length;o++){var r=new Date(e.events[o].date).setHours(0,0,0,0);if(a===r)return e.events[o].status}return""},e.saveEdittedEvent=function(){var e=input.getElementsByTagName("input"),t=input.getElementsByTagName("textarea")[0],n=input.getElementsByTagName("select")[0],a=e[0].closest("form"),o=new XMLHttpRequest;o.open("GET","https://maps.googleapis.com/maps/api/geocode/json?address=Meulebeke+krinkelstraat&key=AIzaSyAiapygRLC6a3O-pyXahU2l47I8pMV2Pdw",!0),o.onload=function(r){var i=JSON.parse(o.responseText),s=i.results[0].geometry.location,u=s.lat,l=s.lng,c={id:a.id,picture:e.pictureUrl.value,title:e.etitle.value,date:e.date.value,time:e.time.value,location:e.Location.value+"/./"+u+"/./"+l,group:n.value,cost:e.cost.value,slots:e.slots.value,description:t.value};console.log(c);var d=new XMLHttpRequest;d.open("POST","/api/profile/updateEvent",!0),d.setRequestHeader("Content-type","application/json"),d.onload=function(e){document.location.reload(!0)},d.send(JSON.stringify(c))},o.send(null)},e.deleteEvent=function(e){var t=e.currentTarget.closest("tr"),a=t.getElementsByTagName("td"),o=a[1].children[2].innerText,r=n.confirm("Are you absolutely sure you want to delete?");if(r){var i={id:o},s=new XMLHttpRequest;s.open("POST","/api/profile/deleteEvent",!0),s.setRequestHeader("Content-type","application/json"),s.send(JSON.stringify(i)),s.onload=function(e){document.location.reload(!0)}}},e.editEvent=function(t){var n=t.currentTarget.closest("tr"),a=n.getElementsByTagName("td"),o=a.length,r=document.getElementById("input"),i=r.getElementsByTagName("input"),s=r.getElementsByTagName("textarea")[0],u=i[0].closest("form");e.updating=!0;for(var l=o;l--;){var c=a[l].className.split(" "),d=c[c.length-1];switch(d){case"image":break;case"name":i.etitle.value=a[l].innerText,i.Location.value=a[l].children[1].innerText,s.value=a[l].children[0].innerText,u.id=a[l].children[2].innerText;break;case"date":i.date.value=a[l].innerText;break;case"time":i.time.value=a[l].innerText;break;case"price":i.cost.value=a[l].innerText;break;case"maxMember":i.slots.value=a[l].innerText}}}};angular.module("profile").controller("ProfileController",["$scope","$http","$window","mStatusService","jobService","countryService","certainUserService",e])}();
//# sourceMappingURL=data:application/json;base64,
